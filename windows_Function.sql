--Windows Functions
-- 1. Rank the customers based on the total amount they've spent on rentals.

SELECT 
    Customer_ID,
    SUM(Rental_Amount) AS Total_Spent,
    RANK() OVER (ORDER BY SUM(Rental_Amount) DESC) AS Customer_Rank
FROM Rentals
GROUP BY Customer_ID
ORDER BY Customer_Rank;

-- 2. Calculate the cumulative revenue generated by each film over time.
SELECT 
    Film_ID,
    Rental_Date,
    Rental_Amount,
    SUM(Rental_Amount) OVER (PARTITION BY Film_ID ORDER BY Rental_Date) AS Cumulative_Revenue
FROM Rentals
ORDER BY Film_ID, Rental_Date;


-- 3. Determine the average rental duration for each film, considering films with similar lengths.
SELECT 
    f.title,
    AVG(DATEDIFF(r.return_date, r.rental_date)) AS average_rental_duration
FROM 
    films f
JOIN 
    rentals r ON f.film_id = r.film_id
GROUP BY 
    f.title, f.length;

-- 4. Identify the top 3 films in each category based on their rental counts.
WITH RankedFilms AS (
    SELECT 
        f.Film_ID,
        f.Title,
        f.Category,
        COUNT(r.Rental_ID) AS Rental_Count,
        ROW_NUMBER() OVER (PARTITION BY f.Category ORDER BY COUNT(r.Rental_ID) DESC) AS Rank
    FROM Rentals r
    JOIN Films f ON r.Film_ID = f.Film_ID
    GROUP BY f.Film_ID, f.Title, f.Category
)
SELECT Film_ID, Title, Category, Rental_Count
FROM RankedFilms
WHERE Rank <= 3
ORDER BY Category, Rank;



/*5. Calculate the difference in rental counts between each customer's total rentals and the average rentals 
      across all customers.*/
SELECT 
    c.first_name,
    c.last_name,
    COUNT(r.rental_id) AS total_rentals,
    COUNT(r.rental_id) - (SELECT AVG(rental_count) FROM (SELECT COUNT(r.rental_id) AS rental_count FROM rentals 
    r GROUP BY r.customer_id) AS avg_rentals) AS rental_difference
FROM 
    customers c
JOIN 
    rentals r ON c.customer_id = r.customer_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name;


-- 6. Find the monthly revenue trend for the entire rental store over time.
SELECT 
    DATE_FORMAT(r.rental_date, '%Y-%m') AS month,
    SUM(p.amount) AS monthly_revenue
FROM 
    rentals r
JOIN 
    payments p ON r.rental_id = p.rental_id
GROUP BY 
    DATE_FORMAT(r.rental_date, '%Y-%m')
ORDER BY 
    DATE_FORMAT(r.rental_date, '%Y-%m');


-- 7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.
with customer_spend as 
(select customer_id, sum(amount) as total_rental_spend, 
rank() over(order by sum(amount) desc) as customer_rank from payment group by customer_id) 
select customer_id, total_rental_spend, customer_rank from customer_spend
where customer_rank < ((select count(*) from customer_spend)*20)/100;   -- rank within 20% of all customer



-- 8. Calculate the running total of rentals per category, ordered by rental count.
SELECT 
    c.name AS category,
    f.title,
    r.rental_count,
    SUM(r.rental_count) OVER (PARTITION BY c.category_id ORDER BY r.rental_count DESC) AS running_total
FROM 
    categories c
JOIN 
    films f ON c.category_id = f.category_id
JOIN 
    (SELECT 
         film_id, 
         COUNT(rental_id) AS rental_count 
     FROM 
         rentals 
     GROUP BY 
         film_id) r 
ON f.film_id = r.film_id
ORDER BY 
    c.category_id, r.rental_count DESC;

/*Question 9. Find the films that have been rented less than the average rental count for their. */  

with Category_count as (select f.title , fc.category_id, count(r.rental_id) as rental_count from film as f 
inner join film_category as fc on f.film_id = fc.film_id
inner join inventory as i on f.film_id = i.film_id
inner join rental as r on i.inventory_id = r.inventory_id group by fc.category_id, f.title),
film_count as (select title, category_id ,rental_count, avg(rental_count) over (partition by category_id) as avg_count from Category_count) 
select  title, category_id ,rental_count, avg_count from film_count where rental_count < avg_count; 


/*Question 10.Identify the top 5 months with the highest revenue and display the revenue generated in each month.*/
select monthname(payment_date) as month_name, sum(amount) as total_revenue, 
rank() over(order by sum(amount)desc) as Revenue_rank from payment group by month_name limit 5;    